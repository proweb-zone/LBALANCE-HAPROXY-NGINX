services:
  # PostgreSQL Master
  postgres-master:
    image: postgres:16.1-alpine3.18
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    volumes:
      - postgres-master-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # PostgreSQL Slave 1
  postgres-slave1:
    image: postgres:16.1-alpine3.18
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: testdb
    volumes:
      - postgres-slave1-data:/var/lib/postgresql/data
      - ./init-slave.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    depends_on:
      - postgres-master

  # PostgreSQL Slave 2
  postgres-slave2:
    image: postgres:16.1-alpine3.18
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: testdb
    volumes:
      - postgres-slave2-data:/var/lib/postgresql/data
      - ./init-slave.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    depends_on:
      - postgres-master

  # HAProxy для балансировки PostgreSQL
  haproxy:
    image: haproxy:2.4
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    ports:
      - "5433:5433"
    networks:
      - app-network
    depends_on:
      - postgres-master
      - postgres-slave1
      - postgres-slave2

  # Golang приложение 1
  app1:
    build: ./app
    environment:
      DATABASE_URL: "postgres://user:password@haproxy:5433/testdb?sslmode=disable"
    networks:
      - app-network
    depends_on:
      - haproxy

  # Golang приложение 2
  app2:
    build: ./golang
    environment:
      DATABASE_URL: "postgres://user:password@haproxy:5433/testdb?sslmode=disable"
    networks:
      - app-network
    depends_on:
      - haproxy

  # Golang приложение 3
  app3:
    build: ./golang
    environment:
      DATABASE_URL: "postgres://user:password@haproxy:5433/testdb?sslmode=disable"
    networks:
      - app-network
    depends_on:
      - haproxy

  # Nginx для балансировки приложений
  nginx:
    image: nginx:1.21
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:80"
    networks:
      - app-network
    depends_on:
      - app1
      - app2
      - app3

  # Генератор нагрузки (Go приложение)
  load-generator:
    build: ./golang
    command: ["./app", "load"]
    environment:
      TARGET_URL: "http://nginx:80"
      REQUESTS_PER_SECOND: "100"
      DURATION: "60"
    networks:
      - app-network
    # depends_on:
    #   - nginx

volumes:
  postgres-master-data:
  postgres-slave1-data:
  postgres-slave2-data:

networks:
  app-network:
    driver: bridge
